{
  "version": 3,
  "sources": ["../keystone.ts", "../src/index.ts", "../src/schema/lists/post.ts", "../src/schema/lists/tag.ts", "../src/schema/lists/user.ts", "../src/schema/index.ts", "../src/utils/env.ts", "../src/utils/database.ts"],
  "sourcesContent": ["// Keystone requires a \"keystone.ts\" file in the project root.\n// This import and then export allows for the \"src\" directory\n// to be the source of truth.\n\nimport keystoneApplication from \"./src/index\";\n\nexport default keystoneApplication;", "import { config } from \"@keystone-6/core\";\nimport { lists } from \"./schema\";\nimport { getDatabaseURL, getShadowDatabaseURL } from \"./utils/database\";\n\nexport default config({\n  db: {\n    provider: \"postgresql\",\n    url: getDatabaseURL(),\n    idField: { kind: \"uuid\" },\n    shadowDatabaseUrl: getShadowDatabaseURL(),\n  },\n  lists,\n  server: {\n    port: parseInt(process.env.PORT ?? \"8080\"),\n  }\n});\n", "import type { Lists } from \".keystone/types\";\n\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport { relationship, text } from \"@keystone-6/core/fields\";\nimport { document } from '@keystone-6/fields-document';\n\n\nexport const Post: Exclude<Lists[\"Post\"], undefined> = list({\n  // WARNING\n  //   for this starter project, anyone can create, query, update and delete anything\n  //   if you want to prevent random people on the internet from accessing your data,\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  access: allowAll,\n\n  // this is the fields for our Post list\n  fields: {\n    title: text({ validation: { isRequired: true } }),\n\n    // the document field can be used for making rich editable content\n    //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n    content: document({\n      formatting: true,\n      layouts: [\n        [1, 1],\n        [1, 1, 1],\n        [2, 1],\n        [1, 2],\n        [1, 2, 1],\n      ],\n      links: true,\n      dividers: true,\n    }),\n\n    // with this field, you can set a User as the author for a Post\n    author: relationship({\n      // we could have used 'User', but then the relationship would only be 1-way\n      ref: 'User.posts',\n\n      // this is some customisations for changing how this will look in the AdminUI\n      ui: {\n        displayMode: 'cards',\n        cardFields: ['name', 'email'],\n        inlineEdit: { fields: ['name', 'email'] },\n        linkToItem: true,\n        inlineConnect: true,\n      },\n\n      // a Post can only have one author\n      //   this is the default, but we show it here for verbosity\n      many: false,\n    }),\n\n    // with this field, you can add some Tags to Posts\n    tags: relationship({\n      // we could have used 'Tag', but then the relationship would only be 1-way\n      ref: 'Tag.posts',\n\n      // a Post can have many Tags, not just one\n      many: true,\n\n      // this is some customisations for changing how this will look in the AdminUI\n      ui: {\n        displayMode: 'cards',\n        cardFields: ['name'],\n        inlineEdit: { fields: ['name'] },\n        linkToItem: true,\n        inlineConnect: true,\n        inlineCreate: { fields: ['name'] },\n      },\n    }),\n  },\n})", "import type { Lists } from '.keystone/types';\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { relationship, text } from '@keystone-6/core/fields';\n\nexport const Tag: Exclude<Lists[\"Tag\"], undefined> = list({\n  // WARNING\n  //   for this starter project, anyone can create, query, update and delete anything\n  //   if you want to prevent random people on the internet from accessing your data,\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  access: allowAll,\n\n  // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n  ui: {\n    isHidden: true,\n  },\n\n  // this is the fields for our Tag list\n  fields: {\n    name: text(),\n    // this can be helpful to find out all the Posts associated with a Tag\n    posts: relationship({ ref: 'Post.tags', many: true }),\n  },\n})", "import { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport { password, relationship, text, timestamp } from \"@keystone-6/core/fields\";\n\nimport type { Lists } from \".keystone/types\";\n\nexport const User: Exclude<Lists[\"User\"], undefined> = list({\n  access: allowAll,\n  fields: {\n    name: text({ validation: { isRequired: true } }),\n    email: text({\n      validation: { isRequired: true },\n      isIndexed: 'unique',\n    }),\n    password: password({ validation: { isRequired: true } }),\n    posts: relationship({ ref: 'Post.author', many: true }),\n    createdAt: timestamp({\n      defaultValue: { kind: 'now' },\n    }),\n  },\n})", "import { ListConfig } from \"@keystone-6/core\";\nimport { Post, Tag, User } from \"./lists\";\n\nexport const lists: Record<string, ListConfig<any>> = {\n  Post,\n  Tag,\n  User,\n}", "export type GetEnvVariablesResult<T extends string> = \n  | { success: true; variables: Record<T, string> }\n  | { success: false; missingVariables: T[] };\n\nexport function getEnvVariables<T extends string>(...variableNames: T[]): GetEnvVariablesResult<T> {\n  const missingVariables: T[] = [];\n  const variables: Record<T, string> = {} as Record<T, string>;\n\n  for (const variableName of variableNames) {\n    const value = process.env[variableName];\n    if (value === undefined || value === null) {\n      missingVariables.push(variableName);\n    } else {\n      variables[variableName] = value;\n    }\n  }\n\n  if (missingVariables.length > 0) {\n    return { success: false, missingVariables };\n  }\n\n  return { success: true, variables };\n}\n", "import { getEnvVariables } from \"./env\";\n\nexport function getDatabaseURL(): string {\n  const databaseComponents = getEnvVariables(\"DB_NAME\", \"DB_USER\", \"DB_PASS\", \"DB_HOST\", \"DB_PORT\");\n\n  if (!databaseComponents.success) {\n    throw new Error(`Missing environment variables: ${databaseComponents.missingVariables.join(\", \")}`);\n  }\n\n  const { DB_HOST, DB_PORT, DB_NAME, DB_PASS, DB_USER } = databaseComponents.variables;\n\n  return `postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}`;\n}\n\nexport function getShadowDatabaseURL(): string {\n  const databaseComponents = getEnvVariables(\"DB_SHADOW_NAME\", \"DB_USER\", \"DB_PASS\", \"DB_HOST\", \"DB_PORT\");\n\n  if (!databaseComponents.success) {\n    throw new Error(`Missing environment variables: ${databaseComponents.missingVariables.join(\", \")}`);\n  }\n\n  const { DB_HOST, DB_PORT, DB_SHADOW_NAME, DB_PASS, DB_USER } = databaseComponents.variables;\n\n  return `postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_SHADOW_NAME}`;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,eAAuB;;;ACEvB,kBAAqB;AACrB,oBAAyB;AACzB,oBAAmC;AACnC,6BAAyB;AAGlB,IAAM,WAA0C,kBAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAK1D,QAAQ;AAAA;AAAA,EAGR,QAAQ;AAAA,IACN,WAAO,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,IAIhD,aAAS,iCAAS;AAAA,MAChB,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,CAAC,GAAG,CAAC;AAAA,QACL,CAAC,GAAG,GAAG,CAAC;AAAA,QACR,CAAC,GAAG,CAAC;AAAA,QACL,CAAC,GAAG,CAAC;AAAA,QACL,CAAC,GAAG,GAAG,CAAC;AAAA,MACV;AAAA,MACA,OAAO;AAAA,MACP,UAAU;AAAA,IACZ,CAAC;AAAA;AAAA,IAGD,YAAQ,4BAAa;AAAA;AAAA,MAEnB,KAAK;AAAA;AAAA,MAGL,IAAI;AAAA,QACF,aAAa;AAAA,QACb,YAAY,CAAC,QAAQ,OAAO;AAAA,QAC5B,YAAY,EAAE,QAAQ,CAAC,QAAQ,OAAO,EAAE;AAAA,QACxC,YAAY;AAAA,QACZ,eAAe;AAAA,MACjB;AAAA;AAAA;AAAA,MAIA,MAAM;AAAA,IACR,CAAC;AAAA;AAAA,IAGD,UAAM,4BAAa;AAAA;AAAA,MAEjB,KAAK;AAAA;AAAA,MAGL,MAAM;AAAA;AAAA,MAGN,IAAI;AAAA,QACF,aAAa;AAAA,QACb,YAAY,CAAC,MAAM;AAAA,QACnB,YAAY,EAAE,QAAQ,CAAC,MAAM,EAAE;AAAA,QAC/B,YAAY;AAAA,QACZ,eAAe;AAAA,QACf,cAAc,EAAE,QAAQ,CAAC,MAAM,EAAE;AAAA,MACnC;AAAA,IACF,CAAC;AAAA,EACH;AACF,CAAC;;;ACvED,IAAAC,eAAqB;AACrB,IAAAC,iBAAyB;AACzB,IAAAC,iBAAmC;AAE5B,IAAM,UAAwC,mBAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAKxD,QAAQ;AAAA;AAAA,EAGR,IAAI;AAAA,IACF,UAAU;AAAA,EACZ;AAAA;AAAA,EAGA,QAAQ;AAAA,IACN,UAAM,qBAAK;AAAA;AAAA,IAEX,WAAO,6BAAa,EAAE,KAAK,aAAa,MAAM,KAAK,CAAC;AAAA,EACtD;AACF,CAAC;;;ACvBD,IAAAC,eAAqB;AACrB,IAAAC,iBAAyB;AACzB,IAAAC,iBAAwD;AAIjD,IAAM,WAA0C,mBAAK;AAAA,EAC1D,QAAQ;AAAA,EACR,QAAQ;AAAA,IACN,UAAM,qBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IAC/C,WAAO,qBAAK;AAAA,MACV,YAAY,EAAE,YAAY,KAAK;AAAA,MAC/B,WAAW;AAAA,IACb,CAAC;AAAA,IACD,cAAU,yBAAS,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IACvD,WAAO,6BAAa,EAAE,KAAK,eAAe,MAAM,KAAK,CAAC;AAAA,IACtD,eAAW,0BAAU;AAAA,MACnB,cAAc,EAAE,MAAM,MAAM;AAAA,IAC9B,CAAC;AAAA,EACH;AACF,CAAC;;;ACjBM,IAAM,QAAyC;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AACF;;;ACHO,SAAS,mBAAqC,eAA8C;AACjG,QAAM,mBAAwB,CAAC;AAC/B,QAAM,YAA+B,CAAC;AAEtC,aAAW,gBAAgB,eAAe;AACxC,UAAM,QAAQ,QAAQ,IAAI,YAAY;AACtC,QAAI,UAAU,UAAa,UAAU,MAAM;AACzC,uBAAiB,KAAK,YAAY;AAAA,IACpC,OAAO;AACL,gBAAU,YAAY,IAAI;AAAA,IAC5B;AAAA,EACF;AAEA,MAAI,iBAAiB,SAAS,GAAG;AAC/B,WAAO,EAAE,SAAS,OAAO,iBAAiB;AAAA,EAC5C;AAEA,SAAO,EAAE,SAAS,MAAM,UAAU;AACpC;;;ACpBO,SAAS,iBAAyB;AACvC,QAAM,qBAAqB,gBAAgB,WAAW,WAAW,WAAW,WAAW,SAAS;AAEhG,MAAI,CAAC,mBAAmB,SAAS;AAC/B,UAAM,IAAI,MAAM,kCAAkC,mBAAmB,iBAAiB,KAAK,IAAI,CAAC,EAAE;AAAA,EACpG;AAEA,QAAM,EAAE,SAAS,SAAS,SAAS,SAAS,QAAQ,IAAI,mBAAmB;AAE3E,SAAO,gBAAgB,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO;AAC5E;AAEO,SAAS,uBAA+B;AAC7C,QAAM,qBAAqB,gBAAgB,kBAAkB,WAAW,WAAW,WAAW,SAAS;AAEvG,MAAI,CAAC,mBAAmB,SAAS;AAC/B,UAAM,IAAI,MAAM,kCAAkC,mBAAmB,iBAAiB,KAAK,IAAI,CAAC,EAAE;AAAA,EACpG;AAEA,QAAM,EAAE,SAAS,SAAS,gBAAgB,SAAS,QAAQ,IAAI,mBAAmB;AAElF,SAAO,gBAAgB,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,cAAc;AACnF;;;ANpBA,IAAO,kBAAQ,qBAAO;AAAA,EACpB,IAAI;AAAA,IACF,UAAU;AAAA,IACV,KAAK,eAAe;AAAA,IACpB,SAAS,EAAE,MAAM,OAAO;AAAA,IACxB,mBAAmB,qBAAqB;AAAA,EAC1C;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,IACN,MAAM,SAAS,QAAQ,IAAI,QAAQ,MAAM;AAAA,EAC3C;AACF,CAAC;;;ADTD,IAAO,mBAAQ;",
  "names": ["import_core", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields"]
}
